import os
import json
import asyncio
import logging
import shutil
import tempfile
import random
import re
from typing import Dict, Optional, Iterator, AsyncGenerator, List, Tuple
from datetime import datetime, timedelta
from pathlib import Path
import time
import requests
import aiohttp

import openai
from openai import AsyncOpenAI
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# API –∫–ª—é—á OpenRouter
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
def filter_models_by_regex(models_list, pattern):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é"""
    regex = re.compile(pattern, re.IGNORECASE)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    return [model for model in models_list if regex.search(model.get("id", ""))]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ API OpenRouter
async def fetch_models_from_openrouter():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ OpenRouter API"""
    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get("https://openrouter.ai/api/v1/models", headers=headers) as response:
                if response.status == 200:
                    models_data = await response.json()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(models_data['data'])} –º–æ–¥–µ–ª–µ–π –æ—Ç OpenRouter API")
                    return models_data['data']
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {str(e)}")
        return []

# –§–∏–ª—å—Ç—Ä –¥–ª—è –º–æ–¥–µ–ª–µ–π Claude
CLAUDE_MODEL_PATTERN = r"claude"

# –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
AVAILABLE_MODELS = [
    # –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    {"id": "anthropic/claude-3-haiku", "name": "Claude 3 Haiku", "context_length": 200000}
]

# –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏ - –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
DEFAULT_MODEL = "anthropic/claude-3-haiku"

# URL –¥–ª—è OpenRouter API
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
user_models: Dict[str, str] = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
async def update_available_models():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ API"""
    global AVAILABLE_MODELS, DEFAULT_MODEL
    
    models = await fetch_models_from_openrouter()
    if not models:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ –∏–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ")
        return False
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª–∏ Claude
    claude_models = filter_models_by_regex(models, CLAUDE_MODEL_PATTERN)
    if not claude_models:
        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π Claude –≤ API")
        return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    AVAILABLE_MODELS = claude_models
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å Claude 3 Haiku, –µ—Å–ª–∏ –µ—Å—Ç—å
    for model in claude_models:
        if "haiku" in model.get("id", "").lower():
            DEFAULT_MODEL = model.get("id")
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_MODEL}")
            break
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –º–æ–¥–µ–ª–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
        DEFAULT_MODEL = claude_models[0].get("id")
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–µ—Ä–≤–∞—è –≤ —Å–ø–∏—Å–∫–µ): {DEFAULT_MODEL}")
    
    return True

def get_available_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    return AVAILABLE_MODELS

def get_model_by_id(model_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏ –ø–æ –µ—ë ID"""
    for model in AVAILABLE_MODELS:
        if model.get("id") == model_id:
            return model
    
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    return {"id": model_id, "name": model_id.split("/")[-1], "context_length": 100000}

def get_error_message(e: Exception) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏"""
    return f"{type(e).__name__}: {e}"

def prepare_conversation_kwargs(message_text: str, conversation_id: str = None, user_id: int = None) -> dict:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    kwargs = {}
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages = []
    messages.append({
        "role": "user",
        "content": message_text
    })
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
    model = None
    if user_id:
        if str(user_id) in user_models:
            model = user_models[str(user_id)]
        else:
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
            model = DEFAULT_MODEL
            user_models[str(user_id)] = model
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    return {
        "model": model,  # –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –º–æ–¥–µ–ª—å
        "messages": messages,
        "user_id": str(user_id) if user_id else None,  # –î–æ–±–∞–≤–ª—è–µ–º user_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    }

async def create_response_stream(kwargs: Dict, user_id: str) -> AsyncGenerator[str, None]:
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Ç–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç OpenRouter API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ kwargs –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        model = kwargs.get("model", DEFAULT_MODEL)
        messages = kwargs.get("messages", [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if not OPENROUTER_API_KEY:
            yield "‚ùå API –∫–ª—é—á OpenRouter –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ OPENROUTER_API_KEY –≤ .env —Ñ–∞–π–ª."
            return
        
        # –ó–∞–ø—Ä–æ—Å –∫ API –≤ –ø–æ—Ç–æ–∫–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter API —Å –º–æ–¥–µ–ª—å—é {model}")
            
            payload = {
                "model": model,
                "messages": messages,
                "temperature": 0.7,
                "max_tokens": 2000,
                "stream": True
            }
            
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://telegram.org",  # –†–µ—Ñ–µ—Ä–µ—Ä (–æ–±—ã—á–Ω–æ –≤–∞—à –¥–æ–º–µ–Ω)
                "X-Title": "Telegram News Bot"          # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(OPENROUTER_API_URL, json=payload, headers=headers) as response:
                    async for line in response.content:
                        if line:
                            line_text = line.decode('utf-8').strip()
                            if line_text.startswith('data:') and not line_text.startswith('data: [DONE]'):
                                json_data = json.loads(line_text[5:])
                                if 'choices' in json_data and json_data['choices']:
                                    if 'delta' in json_data['choices'][0] and 'content' in json_data['choices'][0]['delta']:
                                        content = json_data['choices'][0]['delta']['content']
                                        if content:
                                            yield content
                    
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter API: {str(e)}"
            logger.error(error_msg)
            yield error_msg
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        yield error_msg

async def try_gpt_request(prompt: str, posts_text: str = "", user_id: int = None, bot=None, user_data: dict = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter API —á–µ—Ä–µ–∑ requests –≤–º–µ—Å—Ç–æ OpenAI SDK"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ user_data –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        selected_model_id = user_data.get('ai_settings', {}).get('model', DEFAULT_MODEL)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        model_info = get_model_by_id(selected_model_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        status_message = await bot.send_message(
            user_id,
            f"üîÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...\n"
            f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(posts_text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {model_info.get('name', selected_model_id)}"
        )
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
        messages = [
            {"role": "system", "content": "–¢—ã –º–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö. –¢—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—à—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."},
            {"role": "user", "content": f"{prompt}\n\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n{posts_text}"}
        ]
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter API —Å –º–æ–¥–µ–ª—å—é {selected_model_id}")
            
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://telegram.org",  # –†–µ—Ñ–µ—Ä–µ—Ä
                "X-Title": "Telegram News Bot"          # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            }
            
            payload = {
                "model": selected_model_id,
                "messages": messages,
                "temperature": 0.7,
                "max_tokens": 2000
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            async with aiohttp.ClientSession() as session:
                async with session.post(OPENROUTER_API_URL, json=payload, headers=headers) as response:
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
                    response_json = await response.json()
                    
                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API: {str(response_json)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
                    if "error" in response_json:
                        error_msg = f"–û—à–∏–±–∫–∞ OpenRouter API: {response_json['error']['message']}"
                        if "metadata" in response_json.get("error", {}):
                            error_msg += f" ({response_json['error']['metadata'].get('provider_name', 'Unknown')})"
                        logger.error(error_msg)
                        raise Exception(error_msg)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                    if "choices" not in response_json or not response_json["choices"]:
                        logger.error("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ choices –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤")
                        raise Exception("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ choices")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
                    assistant_response = response_json["choices"][0]["message"]["content"]
                    
                    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç
                    if assistant_response is None or assistant_response == "":
                        logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π content –æ—Ç API, –∏—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç")
                        assistant_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
                    await status_message.delete()
                    return assistant_response
            
        except aiohttp.ClientError as e:
            error_str = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter API: {error_str}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
            await status_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:\n{error_str}"
            )
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {error_str}")
            
    except Exception as e:
        error_msg = get_error_message(e)
        if 'status_message' in locals():
            await status_message.edit_text(error_msg)
        raise Exception(error_msg)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã DEFAULT_PROVIDERS –∏–∑ —Ç–µ–∫—É—â–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
def update_default_providers():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É DEFAULT_PROVIDERS –Ω–∞ –æ—Å–Ω–æ–≤–µ AVAILABLE_MODELS"""
    global DEFAULT_PROVIDERS
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
    models_by_provider = {}
    
    for model in AVAILABLE_MODELS:
        model_id = model.get("id", "")
        provider = "Anthropic"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è Claude
        
        if provider not in models_by_provider:
            models_by_provider[provider] = []
        
        models_by_provider[provider].append(model_id)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É DEFAULT_PROVIDERS
    new_providers = []
    for provider, models in models_by_provider.items():
        new_providers.append({
            'provider': provider,
            'models': models
        })
    
    DEFAULT_PROVIDERS = new_providers
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –º–æ–¥–µ–ª–µ–π: {len(DEFAULT_PROVIDERS)} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
DEFAULT_PROVIDERS = [
    {
        'provider': 'Anthropic',
        'models': ['anthropic/claude-3-haiku']  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    }
]

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
__all__ = [
    'try_gpt_request',
    'DEFAULT_PROVIDERS',
    'prepare_conversation_kwargs',
    'create_response_stream',
    'get_available_models',
    'user_models',
    'DEFAULT_MODEL',
    'filter_models_by_regex',
    'fetch_models_from_openrouter',
    'CLAUDE_MODEL_PATTERN',
    'update_available_models',
    'update_default_providers'
] 