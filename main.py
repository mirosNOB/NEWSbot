import logging
import yaml
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from channel_parser import ChannelParser
from ai_service import (
    try_gpt_request, DEFAULT_PROVIDERS, user_models, 
    fetch_models_from_openrouter, filter_models_by_regex, 
    CLAUDE_MODEL_PATTERN, DEFAULT_MODEL, update_available_models,
    update_default_providers, get_available_models
)
from config import BOT_TOKEN, PROMPTS_FILE, CHANNELS_DIR, USERS_DIR, WHITELIST_FILE, ADMINS_FILE, ADMIN_COMMANDS
import os
import json
from datetime import datetime
import asyncio
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.handler import CancelHandler
from aiogram.dispatcher.middlewares import BaseMiddleware
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞
from web_search import generate_search_query, perform_web_search

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        logging.FileHandler('bot.log')  # –í—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
os.makedirs(CHANNELS_DIR, exist_ok=True)
os.makedirs(USERS_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
channel_parser = ChannelParser()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
def load_prompts():
    with open(PROMPTS_FILE, 'r', encoding='utf-8') as file:
        return yaml.safe_load(file)

prompts = load_prompts()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    waiting_for_prompt = State()
    waiting_for_input = State()
    waiting_for_channel = State()
    waiting_for_days = State()
    initial_setup = State()  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    waiting_for_user_id = State()  # –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    waiting_for_admin_id = State()  # –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    waiting_for_broadcast = State()  # –î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    waiting_for_model_id = State()  # –î–ª—è –≤–≤–æ–¥–∞ ID –º–æ–¥–µ–ª–∏
    waiting_for_web_search_confirmation = State()  # –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def save_user_settings(user_id: int, settings: dict):
    with open(os.path.join(USERS_DIR, f"{user_id}.json"), 'w', encoding='utf-8') as f:
        json.dump(settings, f, ensure_ascii=False, indent=2)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def load_user_settings(user_id: int) -> dict:
    settings_file = os.path.join(USERS_DIR, f"{user_id}.json")
    if os.path.exists(settings_file):
        try:
            with open(settings_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            return {'ai_settings': {'model': DEFAULT_AI_MODEL}, 'web_search_enabled': False}
    return {'ai_settings': {'model': DEFAULT_AI_MODEL}, 'web_search_enabled': False}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        ["üìä –ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏", "üë§ PR –∏ –ò–º–∏–¥–∂"],
        ["üì∞ –†–∞–±–æ—Ç–∞ —Å–æ –°–ú–ò", "‚ö†Ô∏è –ö—Ä–∏–∑–∏—Å"],
        ["üì∫ –ö–∞–Ω–∞–ª—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    ]
    keyboard.add(*[types.KeyboardButton(text) for text in buttons[0]])
    keyboard.add(*[types.KeyboardButton(text) for text in buttons[1]])
    keyboard.add(*[types.KeyboardButton(text) for text in buttons[2]])
    return keyboard

def get_channels_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_channel"),
        types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫", callback_data="list_channels"),
        types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="update_channels"),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="channels_stats"),
        types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
    keyboard.row(buttons[0], buttons[1])
    keyboard.row(buttons[2], buttons[3])
    keyboard.row(buttons[4])
    return keyboard

def get_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å Claude", callback_data="select_model"),
        types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã", callback_data="edit_prompts"),
        types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã", callback_data="reload_prompts"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
        types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return keyboard

def get_models_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ AI"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    for provider in DEFAULT_PROVIDERS:
        for model_id in provider['models']:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            model_info = None
            for model in get_available_models():
                if model.get('id') == model_id:
                    model_info = model
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é
            if not model_info:
                model_name = model_id.split('/')[-1]
            else:
                model_name = model_info.get('name', model_id.split('/')[-1])
            
            keyboard.add(
                types.InlineKeyboardButton(
                    f"{model_name} ({provider['provider']})", 
                    callback_data=f"model_{model_id}"
                )
            )
    
    keyboard.add(types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π", callback_data="refresh_models"))
    keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings"))
    return keyboard

# –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
BUTTON_TO_CATEGORY = {
    "üìä –ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏": "political_analysis",
    "üë§ PR –∏ –ò–º–∏–¥–∂": "image_formation",
    "üì∞ –†–∞–±–æ—Ç–∞ —Å–æ –°–ú–ò": "media_relations",
    "‚ö†Ô∏è –ö—Ä–∏–∑–∏—Å": "crisis_management"
}

def get_category_inline_keyboard(category):
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π –∫ –∫–ª—é—á–∞–º –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö
    actions = {
        "political_analysis": [
            ("üìä –ê–Ω–∞–ª–∏–∑", "situation_analysis"),
            ("üîÑ –ü—Ä–æ–≥–Ω–æ–∑", "forecast"),
            ("üìà SWOT", "swot")
        ],
        "image_formation": [
            ("üì£ PR –∫–∞–º–ø–∞–Ω–∏—è", "pr_campaign"),
            ("üì∫ –ú–µ–¥–∏–∞", "media_advice"),
            ("‚ú® –ü—Ä–∏–º–µ—Ä—ã", "success_cases")
        ],
        "media_relations": [
            ("üìù –ü—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑", "press_release"),
            ("üé§ –ò–Ω—Ç–µ—Ä–≤—å—é", "interview")
        ],
        "crisis_management": [
            ("üö® –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π", "action_plan"),
            ("‚öñÔ∏è –Æ—Ä–∏—Å—Ç—ã", "legal_advice"),
            ("üìã –ü—Ä–∏–º–µ—Ä—ã", "case_studies")
        ]
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
    buttons = []
    for display_name, action_key in actions.get(category, []):
        buttons.append(
            types.InlineKeyboardButton(
                display_name,
                callback_data=f"{category}_{action_key}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            keyboard.row(buttons[i], buttons[i + 1])
        else:
            keyboard.row(buttons[i])
    
    keyboard.row(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞
def get_input_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("‚ùå –û—Ç–º–µ–Ω–∞", "‚úÖ –ì–æ—Ç–æ–≤–æ")
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
async def show_typing_status(chat_id, bot, stop_event):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä '–ø–µ—á–∞—Ç–∞–µ—Ç...' –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω stop_event"""
    while not stop_event.is_set():
        try:
            await bot.send_chat_action(chat_id, 'typing')
            await asyncio.sleep(4)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 4 —Å–µ–∫—É–Ω–¥—ã (—Å—Ç–∞—Ç—É—Å –æ–±—ã—á–Ω–æ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—á–∞—Ç–∏: {e}")
            break

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    user_settings = await load_user_settings(message.from_user.id)
    
    if not user_settings.get('setup_completed'):
        logger.info(f"–ù–∞—á–∞–ª–æ –ø–µ—Ä–≤–∏—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await Form.initial_setup.set()
        welcome_text = (
            "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–æ–ª–∏—Ç—Ç–µ—Ö–Ω–æ–ª–æ–≥ –ë–æ—Ç\\!*\n\n"
            "–Ø –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç–µ\\. "
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞ –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\\.\n\n"
            "ü§ñ *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –º–æ–¥–µ–ª—å AI:*"
        )
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for provider in DEFAULT_PROVIDERS:
            for model in provider['models']:
                keyboard.add(
                    types.InlineKeyboardButton(
                        f"{model} ({provider['provider']})", 
                        callback_data=f"initial_model_{model}"
                    )
                )
        await message.answer(welcome_text, parse_mode="MarkdownV2", reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            "ü§ñ *–ü–æ–ª–∏—Ç—Ç–µ—Ö–Ω–æ–ª–æ–≥ –ë–æ—Ç*\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
            parse_mode="MarkdownV2",
            reply_markup=get_main_keyboard()
        )

@dp.callback_query_handler(lambda c: c.data.startswith("initial_model_"), state=Form.initial_setup)
async def process_initial_model_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    model = callback_query.data.replace("initial_model_", "")
    user_id = str(callback_query.from_user.id)
    user_models[user_id] = model
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await save_user_settings(callback_query.from_user.id, {
        'setup_completed': True,
        'model': model,
        'setup_date': datetime.now().isoformat()
    })
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    await state.finish()
    
    setup_complete_text = (
        "‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\\!*\n\n"
        f"ü§ñ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: `{model}`\n\n"
        "üìå *–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏\n"
        "‚Ä¢ PR –∏ –∏–º–∏–¥–∂\\-–º–µ–π–∫–∏–Ω–≥\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å–æ –°–ú–ò\n"
        "‚Ä¢ –ö—Ä–∏–∑–∏—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n\n"
        "üîç *–°–æ–≤–µ—Ç:* –ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\\, "
        "—ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –±–æ—Ç—É –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\\.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    await callback_query.message.edit_text(
        setup_complete_text,
        parse_mode="MarkdownV2",
        reply_markup=None
    )
    
    await callback_query.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )
    
    await callback_query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

@dp.message_handler(lambda message: message.text == "!—Å–±—Ä–æ—Å")
async def handle_reset(message: types.Message):
    """–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = message.from_user.id
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        os.remove(os.path.join(USERS_DIR, f"{user_id}.json"))
    except:
        pass
    
    # –£–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if str(user_id) in user_models:
        del user_models[str(user_id)]
    
    # –û—á–∏—â–∞–µ–º –∫–∞–Ω–∞–ª—ã
    try:
        channel_parser.channels = {}
        channel_parser.save_channels()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞–Ω–∞–ª–æ–≤: {e}")
    
    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–æ–≤
    try:
        for item in os.listdir(CHANNELS_DIR):
            item_path = os.path.join(CHANNELS_DIR, item)
            if os.path.isfile(item_path):
                os.remove(item_path)
            elif os.path.isdir(item_path):
                for subitem in os.listdir(item_path):
                    os.remove(os.path.join(item_path, subitem))
                os.rmdir(item_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {e}")
    
    # –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ har_and_cookies
    try:
        cookies_dir = os.path.join(os.getcwd(), "har_and_cookies")
        if os.path.exists(cookies_dir):
            for file in os.listdir(cookies_dir):
                file_path = os.path.join(cookies_dir, file)
                if os.path.isfile(file_path):
                    os.remove(file_path)
                    logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∫—É–∫–∏—Å: {file_path}")
            logger.info("‚úÖ –ü–∞–ø–∫–∞ har_and_cookies –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–∫–∏ har_and_cookies: {e}")
    
    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ò–ò
    try:
        # –û—á–∏—â–∞–µ–º –∫—ç—à g4f –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        from ai_service import proxy_manager, conversations
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–æ–∫—Å–∏
        if hasattr(proxy_manager, 'working_proxies'):
            proxy_manager.working_proxies.clear()
            proxy_manager.failed_proxies.clear()
            logger.info("‚úÖ –ö—ç—à –ø—Ä–æ–∫—Å–∏ –æ—á–∏—â–µ–Ω")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        if 'conversations' in globals():
            conversations.clear()
            logger.info("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
        
        # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å g4f –∫—ç—à, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        import g4f
        g4f.debug.last_provider = None
        logger.info("‚úÖ –°–±—Ä–æ—à–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–π –ò–ò")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –ò–ò: {e}")
    
    await message.answer(
        "üîÑ *–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã*\n"
        "\\- –ú–æ–¥–µ–ª—å AI —Å–±—Ä–æ—à–µ–Ω–∞\n"
        "\\- –ö–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã\n"
        "\\- –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã\n"
        "\\- –ö—É–∫–∏—Å –∏ –∫—ç—à –æ—á–∏—â–µ–Ω—ã\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\\.",
        parse_mode="MarkdownV2"
    )

@dp.message_handler(lambda message: message.text == "üì∫ –ö–∞–Ω–∞–ª—ã")
async def handle_channels_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:",
        reply_markup=get_channels_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data == "add_channel")
async def process_add_channel(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await Form.waiting_for_channel.set()
    await callback_query.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "https://t.me/channel_name –∏–ª–∏ @channel_name\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ‚úÖ –ì–æ—Ç–æ–≤–æ –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∏–ª–∏ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        reply_markup=get_input_keyboard()
    )
    await callback_query.answer()

@dp.message_handler(lambda message: message.text in ["‚ùå –û—Ç–º–µ–Ω–∞", "‚úÖ –ì–æ—Ç–æ–≤–æ"] or message.text.startswith('/cancel'), state='*')
async def handle_input_buttons(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –æ—Ç–º–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤–æ, –∞ —Ç–∞–∫–∂–µ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    current_state = await state.get_state()
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞" or message.text.startswith('/cancel'):
        if current_state is not None:
            await state.finish()
            await message.answer(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                reply_markup=get_main_keyboard()
            )
    elif message.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if current_state == "Form:waiting_for_channel":
            await message.answer(
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
                reply_markup=get_main_keyboard()
            )
            await state.finish()
        else:
            await message.answer(
                "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
                reply_markup=get_main_keyboard()
            )
            await state.finish()

@dp.message_handler(state=Form.waiting_for_channel)
async def process_channel_link(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if message.text.startswith('/cancel'):
        await state.finish()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    if message.text.startswith(('https://t.me/', '@')):
        try:
            success, result = await channel_parser.add_channel(message.text)
            if success:
                await message.answer(
                    f"‚úÖ {result}\n\n–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ì–æ—Ç–æ–≤–æ",
                    reply_markup=get_input_keyboard()
                )
            else:
                await message.answer(
                    f"‚ùå {result}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞",
                    reply_markup=get_input_keyboard()
                )
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞",
                reply_markup=get_input_keyboard()
            )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "https://t.me/channel_name –∏–ª–∏ @channel_name\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞",
            reply_markup=get_input_keyboard()
        )

@dp.callback_query_handler(lambda c: c.data == "list_channels")
async def process_list_channels(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    channels = channel_parser.channels
    if not channels:
        await callback_query.message.answer("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç")
    else:
        channels_text = "üì∫ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n\n"
        for channel_id, info in channels.items():
            last_parsed = info.get('last_parsed', '–Ω–∏–∫–æ–≥–¥–∞')
            channels_text += (
                f"üìå {info['title']}\n"
                f"üîó {info['link']}\n"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_parsed}\n\n"
            )
        await callback_query.message.answer(channels_text)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "update_channels")
async def process_update_channels(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤")
    await Form.waiting_for_days.set()
    await callback_query.message.answer(
        "–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?\n"
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–æ—Ç 1 –¥–æ 30):\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        reply_markup=get_input_keyboard()
    )
    await callback_query.answer()

@dp.message_handler(state=Form.waiting_for_days)
async def process_days_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if message.text.startswith('/cancel'):
        await state.finish()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ –¥–Ω–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    
    if message.text.isdigit():
        try:
            days = int(message.text)
            if not 1 <= days <= 30:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 30")
            
            logger.info(f"–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ {days} –¥–Ω–µ–π")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            status_message = await message.answer(
                "üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤...\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
            )
            
            total_channels = len(channel_parser.channels)
            if total_channels == 0:
                await message.answer(
                    "‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                    reply_markup=get_channels_keyboard()
                )
                await state.finish()
                return
                
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
            typing_stop_event = asyncio.Event()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
            typing_task = asyncio.create_task(
                show_typing_status(message.chat.id, message.bot, typing_stop_event)
            )
            
            try:
                updated_channels = 0
                failed_channels = 0
                
                for channel_id, info in channel_parser.channels.items():
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    progress = int((updated_channels + failed_channels) / total_channels * 100)
                    await message.answer(
                        f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞–Ω–∞–ª: {info['title']}\n"
                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%"
                    )
                    
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ {channel_id}: {info['title']}")
                    success, result = await channel_parser.parse_channel(channel_id, days)
                    
                    if success:
                        updated_channels += 1
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∫–∞–Ω–∞–ª {channel_id}: {result}")
                        await message.answer(f"‚úÖ {result}")
                    else:
                        failed_channels += 1
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {result}")
                        await message.answer(f"‚ùå {result}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
                    await asyncio.sleep(1)
                    
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
                typing_stop_event.set()
                try:
                    await typing_task
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                completion_time = datetime.now().strftime("%H:%M:%S")
                final_message = (
                    f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤ {completion_time}\n\n"
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {total_channels}\n"
                    f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_channels}\n"
                    f"‚Ä¢ –û—à–∏–±–æ–∫: {failed_channels}\n"
                    f"‚Ä¢ –ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π"
                )
                
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {final_message}")
                await message.answer(
                    final_message,
                    reply_markup=get_channels_keyboard()
                )
                
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                typing_stop_event.set()
                try:
                    await typing_task
                except Exception as typing_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {typing_error}")
                
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}"
                logger.error(error_msg, exc_info=True)
                await status_message.edit_text(f"‚ùå {error_msg}")
                await message.answer(
                    "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞–Ω–∞–ª–∞–º–∏?",
                    reply_markup=get_channels_keyboard()
                )
                
            finally:
                await state.finish()
        
        except ValueError as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n"
                "–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30 –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                reply_markup=get_input_keyboard()
            )
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            reply_markup=get_input_keyboard()
        )

@dp.callback_query_handler(lambda c: c.data == "channels_stats")
async def process_channels_stats(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"""
    channels = channel_parser.channels
    if not channels:
        await callback_query.message.answer("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        await callback_query.answer()
        return

    stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:\n\n"
    for channel_id, info in channels.items():
        success, stats = await channel_parser.get_channel_stats(channel_id)
        if success:
            stats_text += (
                f"üìå {info['title']}\n"
                f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
                f"üëÅ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats['average_views']:.1f}\n"
                f"üîÑ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–æ—Å—Ç–æ–≤: {stats['average_forwards']:.1f}\n\n"
            )
    
    await callback_query.message.answer(stats_text)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "select_model")
async def process_select_model(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Claude –¥–ª—è –≤–≤–æ–¥–∞"""
    await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π...")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    try:
        success = await update_available_models()
        if success:
            update_default_providers()
            models = get_available_models()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –º–æ–¥–µ–ª–µ–π –≤ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–º —à—Ä–∏—Ñ—Ç–µ
            models_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Claude:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–≤ –µ—ë ID –∏ –æ—Ç–ø—Ä–∞–≤–∏–≤ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n\n"
            for model in models:
                model_id = model.get("id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                model_name = model.get("name", model_id.split("/")[-1])
                context_length = model.get("context_length", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                models_text += f"‚Ä¢ {model_name}\n  ID: `{model_id}`\n  –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_length} —Ç–æ–∫–µ–Ω–æ–≤\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings"))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID –º–æ–¥–µ–ª–∏
            await Form.waiting_for_model_id.set()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ —Å–ø–∏—Å–∫–æ–º –º–æ–¥–µ–ª–µ–π
            await callback_query.message.edit_text(
                models_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            await callback_query.message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ Claude. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_settings_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        await callback_query.message.edit_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {str(e)}",
            reply_markup=get_settings_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –º–æ–¥–µ–ª–∏
@dp.message_handler(state=Form.waiting_for_model_id)
async def process_model_id_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user_id = message.from_user.id
    model_id = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = await load_user_settings(user_id)
    if 'ai_settings' not in user_settings:
        user_settings['ai_settings'] = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç "claude" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    if "claude" not in model_id.lower():
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏", callback_data="select_model"))
        await message.reply(
            "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª–∏ Claude! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=keyboard
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    models = get_available_models()
    model_exists = False
    model_name = model_id.split('/')[-1]
    
    for model in models:
        if model.get("id") == model_id:
            model_exists = True
            model_name = model.get("name", model_id.split("/")[-1])
            break
    
    if not model_exists:
        # –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∑–≤–æ–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ ID –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–µ—Ä–Ω—ã–º
        await message.reply(
            f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –º–æ–¥–µ–ª—å `{model_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ –º–æ–¥–µ–ª–µ–π, "
            f"–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ OpenRouter.",
            parse_mode="Markdown"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    user_settings['ai_settings']['model'] = model_id
    user_models[str(user_id)] = model_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await save_user_settings(user_id, user_settings)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await message.reply(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}\nID: `{model_id}`",
        reply_markup=get_main_keyboard(),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏
@dp.callback_query_handler(lambda c: c.data == "settings", state=Form.waiting_for_model_id)
async def back_to_settings_from_model(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await callback_query.message.edit_text(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_settings_keyboard()
    )
    await callback_query.answer()

@dp.message_handler(lambda message: message.text in BUTTON_TO_CATEGORY.keys())
async def handle_category_selection(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    category = BUTTON_TO_CATEGORY[message.text]
    keyboard = get_category_inline_keyboard(category)
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.message_handler(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_help_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = (
        "ü§ñ *–ü–æ–ª–∏—Ç—Ç–µ—Ö–Ω–æ–ª–æ–≥ –ë–æ—Ç* \\- –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç–µ\\!\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:*\n"
        "üìä *–ê–Ω–∞–ª–∏–∑* \\- –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏\n"
        "üë§ *–ò–º–∏–¥–∂* \\- —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–∏–¥–∂–∞\n"
        "üó£ *–ò–∑–±–∏—Ä–∞—Ç–µ–ª–∏* \\- —Ä–∞–±–æ—Ç–∞ —Å –∏–∑–±–∏—Ä–∞—Ç–µ–ª—è–º–∏\n"
        "üì∞ *–°–ú–ò* \\- —Ä–∞–±–æ—Ç–∞ —Å–æ –°–ú–ò\n"
        "‚ö†Ô∏è *–ö—Ä–∏–∑–∏—Å* \\- –∫—Ä–∏–∑–∏—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
        "üìú *–ó–∞–∫–æ–Ω—ã* \\- –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start \\- –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help \\- –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/edit\\_prompt \\- —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã"
    )
    await message.answer(help_text, parse_mode='MarkdownV2')

@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_settings_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_settings_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data == "edit_prompts")
async def process_edit_prompts_button(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤"""
    available_prompts = "\n".join([
        f"- {cat}: {', '.join(actions.keys())}"
        for cat, actions in prompts.items()
    ])
    await callback_query.message.answer(
        "–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/edit_prompt [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [–¥–µ–π—Å—Ç–≤–∏–µ]\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: /edit_prompt political_analysis situation_analysis\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è:\n{available_prompts}"
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "reload_prompts")
async def process_reload_prompts_button(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤"""
    global prompts
    prompts = load_prompts()
    await callback_query.message.answer("‚úÖ –ü—Ä–æ–º–ø—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "about")
async def process_about_button(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ –±–æ—Ç–µ"""
    about_text = (
        "ü§ñ *–ü–æ–ª–∏—Ç—Ç–µ—Ö–Ω–æ–ª–æ–≥ –ë–æ—Ç* v1\\.0\n\n"
        "–ë–æ—Ç\\-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–ª–∏—Ç—Ç–µ—Ö–Ω–æ–ª–æ–≥–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ò–ò\\.\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "\\- –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏\n"
        "\\- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–∏–¥–∂–∞\n"
        "\\- –†–∞–±–æ—Ç–∞ —Å –∏–∑–±–∏—Ä–∞—Ç–µ–ª—è–º–∏\n"
        "\\- –ú–µ–¥–∏–∞\\-—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n"
        "\\- –ö—Ä–∏–∑–∏—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
        "\\- –ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\\."
    )
    await callback_query.message.answer(about_text, parse_mode='MarkdownV2')
    await callback_query.answer()

@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ *–ü–æ–ª–∏—Ç—Ç–µ—Ö–Ω–æ–ª–æ–≥ –ë–æ—Ç* - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç–µ\\!\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n"
        "/edit\\_prompt - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:*\n"
        "üìä –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏\n"
        "üë§ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–∏–¥–∂–∞\n"
        "üó£ –†–∞–±–æ—Ç–∞ —Å –∏–∑–±–∏—Ä–∞—Ç–µ–ª—è–º–∏\n"
        "üì∞ –†–∞–±–æ—Ç–∞ —Å–æ –°–ú–ò\n"
        "‚ö†Ô∏è –ö—Ä–∏–∑–∏—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
        "üìú –ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\\."
    )
    await message.answer(help_text, parse_mode='MarkdownV2')

@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def process_main_menu(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
        reply_markup=None
    )
    await callback_query.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: any(c.data.startswith(f"{cat}_") for cat in BUTTON_TO_CATEGORY.values()))
async def process_action_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    action = callback_query.data
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏—è
    category = next((cat for cat in BUTTON_TO_CATEGORY.values() if action.startswith(f"{cat}_")), None)
    
    # –î–ª—è –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
    if category == "political_analysis":
        user_id = callback_query.from_user.id
        user_settings = await load_user_settings(user_id)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤–µ–±-–ø–æ–∏—Å–∫–∞
        await state.update_data(
            action=action, 
            web_search_enabled=True, 
            openrouter_web_search=True,
            combined_search=True
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞
        user_settings['web_search_enabled'] = True
        user_settings['openrouter_web_search'] = True
        user_settings['combined_search'] = True
        await save_user_settings(user_id, user_settings)
        
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
        await bot.send_message(
            callback_query.from_user.id,
            "üåê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–µ–Ω –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤–µ–±-–ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
            parse_mode="HTML"
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        await process_action_without_web_search(callback_query, state, action)
        return
    
    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await process_action_without_web_search(callback_query, state, action)

async def process_action_without_web_search(callback_query: types.CallbackQuery, state: FSMContext, action: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –±–µ–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –¥–µ–π—Å—Ç–≤–∏—è
    category = next((cat for cat in BUTTON_TO_CATEGORY.values() if action.startswith(f"{cat}_")), None)
    
    if not category:
        await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã
    prompts = load_prompts()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –ø–æ–ª–Ω–æ–≥–æ action
    action_key = action[len(category) + 1:] if action.startswith(f"{category}_") else action
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö
    if category not in prompts:
        await bot.send_message(callback_query.from_user.id, f"–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö
    if action_key not in prompts[category]:
        await bot.send_message(callback_query.from_user.id, f"–û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ {action_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    prompt_text = prompts[category][action_key]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–µ–π—Å—Ç–≤–∏—è
    actions_map = {
        "political_analysis": {
            "situation_analysis": "–ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏",
            "forecast": "–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞–∑–≤–∏—Ç–∏—è",
            "swot": "SWOT –∞–Ω–∞–ª–∏–∑"
        },
        "image_formation": {
            "pr_campaign": "PR –∫–∞–º–ø–∞–Ω–∏—è",
            "media_advice": "–ú–µ–¥–∏–∞ —Å–æ–≤–µ—Ç—ã",
            "success_cases": "–ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—Ö–∞"
        },
        "media_relations": {
            "press_release": "–ü—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑",
            "interview": "–ò–Ω—Ç–µ—Ä–≤—å—é",
            "media_kit": "–ú–µ–¥–∏–∞-–∫–∏—Ç"
        },
        "crisis_management": {
            "action_plan": "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π",
            "legal_advice": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã",
            "case_studies": "–†–∞–∑–±–æ—Ä –∫–µ–π—Å–æ–≤"
        }
    }
    
    display_name = actions_map.get(category, {}).get(action_key, action_key.capitalize())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(prompt=prompt_text, title=display_name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö
    await Form.waiting_for_input.set()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = get_input_keyboard()
    await bot.send_message(
        callback_query.from_user.id,
        f"üìù <b>{display_name}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞–Ω–∞–ª–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query_handler(lambda c: c.data.startswith("web_search_"), state=Form.waiting_for_web_search_confirmation)
async def process_web_search_choice(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
    choice = callback_query.data.split("_")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    data = await state.get_data()
    action = data.get('action')
    
    if not action:
        await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –≤–µ–±-–ø–æ–∏—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    await state.update_data(web_search_enabled=True, openrouter_web_search=True, combined_search=True)
    await bot.send_message(
        callback_query.from_user.id,
        "üåê –í–∫–ª—é—á–µ–Ω –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π + OpenRouter API). –ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )
    
    # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ
    await process_action_without_web_search(callback_query, state, action)

@dp.message_handler(state=Form.waiting_for_input)
async def process_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    prompt_text = data.get('prompt')
    web_search_enabled = data.get('web_search_enabled', False)
    openrouter_web_search = data.get('openrouter_web_search', False)
    combined_search = data.get('combined_search', False)
    
    user_id = message.from_user.id
    user_settings = await load_user_settings(user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –≤–µ–±-–ø–æ–∏—Å–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'ai_settings' not in user_settings:
        user_settings['ai_settings'] = {}
    user_settings['web_search_enabled'] = web_search_enabled
    user_settings['openrouter_web_search'] = openrouter_web_search
    user_settings['combined_search'] = combined_search
    await save_user_settings(user_id, user_settings)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not message.text or message.text in ["‚ùå –û—Ç–º–µ–Ω–∞", "‚úÖ –ì–æ—Ç–æ–≤–æ"]:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å: {message.text[:50]}...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    stop_typing_event = asyncio.Event()
    typing_task = asyncio.create_task(show_typing_status(message.chat.id, bot, stop_typing_event))
    
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        user_input = message.text.strip()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞
        web_search_results = None
        openrouter_search_results = None
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        search_query = generate_search_query(user_input, prompt_text)
        logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {search_query}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if web_search_enabled and (not openrouter_web_search or combined_search):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞
                search_status_msg = await message.reply("üîç –í—ã–ø–æ–ª–Ω—è—é –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
                web_search_results = perform_web_search(search_query)
                
                # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                await search_status_msg.edit_text(
                    f"üîç –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {len(web_search_results)} —Å–∏–º–≤–æ–ª–æ–≤."
                )
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª–∏–Ω–æ–π {len(web_search_results)} —Å–∏–º–≤–æ–ª–æ–≤")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}")
                await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: {str(e)}")
        
        # –î–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç OpenRouter API
        if combined_search:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ OpenRouter API
                search_status_msg = await message.reply("‚ö°Ô∏è –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ OpenRouter API...")
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ OpenRouter
                # –ó–¥–µ—Å—å –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
                # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
                openrouter_search_results = f"–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {search_query}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ API –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞."
                
                # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                await search_status_msg.edit_text(
                    "‚ö°Ô∏è –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ OpenRouter API –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ OpenRouter API: {str(e)}")
                await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ OpenRouter API: {str(e)}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        channels_data = None
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            channel_parser = ChannelParser()
            await channel_parser.start()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
            channels = channel_parser._load_channels()
            
            if channels:
                channels_status_msg = await message.reply("üìä –í—ã–ø–æ–ª–Ω—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤...")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
                all_posts = []
                for channel_id, channel_info in channels.items():
                    try:
                        result, data = await channel_parser.parse_channel(channel_id, days=3)
                        if result:
                            logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å –∫–∞–Ω–∞–ª–∞ {channel_info['title']}")
                            all_posts.append(f"–ö–∞–Ω–∞–ª: {channel_info['title']}")
                            all_posts.append(f"–°—Å—ã–ª–∫–∞: {channel_info['link']}")
                            all_posts.append(data)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω–∞–ª–∞ {channel_id}: {str(e)}")
                
                if all_posts:
                    channels_data = "\n\n".join(all_posts)
                    await channels_status_msg.edit_text(
                        f"üìä –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(channels_data)} —Å–∏–º–≤–æ–ª–æ–≤."
                    )
                else:
                    await channels_status_msg.edit_text("üìä –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤.")
            
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            await channel_parser.stop()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")
            # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ –±–µ—Ç–∞-—Ä–µ–∂–∏–º–µ, –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
            search_type = ""
            if combined_search:
                search_type = "–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (–ª–æ–∫–∞–ª—å–Ω—ã–π + OpenRouter API)"
            elif web_search_enabled and openrouter_web_search:
                search_type = "OpenRouter API"
            elif web_search_enabled:
                search_type = "–ª–æ–∫–∞–ª—å–Ω—ã–π DuckDuckGo"
            
            beta_note = ""
            if web_search_enabled or openrouter_web_search or combined_search:
                beta_note = f"\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í —ç—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–±-–ø–æ–∏—Å–∫ ({search_type}) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–æ–≤ –∫ –∑–∞–ø—Ä–æ—Å—É, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if channels_data:
                user_input += f"\n\n===== –î–ê–ù–ù–´–ï –ò–ó TELEGRAM –ö–ê–ù–ê–õ–û–í =====\n{channels_data}"
                beta_note += "\n–¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤."
            
            response = await try_gpt_request(
                prompt=prompt_text + beta_note,
                posts_text=user_input,
                user_id=user_id,
                bot=bot,
                user_data=user_settings,
                web_search_results=web_search_results,
                openrouter_search_results=openrouter_search_results,
                combined_search=combined_search
            )
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            stop_typing_event.set()
            await typing_task
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.reply(response)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
            await state.finish()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI: {str(e)}")
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞: {str(e)}")
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        stop_typing_event.set()

@dp.message_handler(commands=['cancel'], state='*')
async def cancel_action(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    
    if current_state is not None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ
        await state.finish()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π", reply_markup=get_main_keyboard())
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /cancel –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

@dp.message_handler(lambda message: message.text in ["!–æ—á–∏—Å—Ç–∏—Ç—å", "!clearcache"])
async def handle_clear_cache(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–µ–π –∏ –∫—É–∫–æ–≤ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞"""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –∏ –∫—É–∫–æ–≤")
    
    # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –∏ –∫—É–∫–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
    typing_stop_event = asyncio.Event()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
    typing_task = asyncio.create_task(
        show_typing_status(message.chat.id, message.bot, typing_stop_event)
    )
    
    try:
        # –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ har_and_cookies
        try:
            cookies_dir = os.path.join(os.getcwd(), "har_and_cookies")
            if os.path.exists(cookies_dir):
                for file in os.listdir(cookies_dir):
                    file_path = os.path.join(cookies_dir, file)
                    if os.path.isfile(file_path):
                        os.remove(file_path)
                        logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∫—É–∫–∏—Å: {file_path}")
                logger.info("‚úÖ –ü–∞–ø–∫–∞ har_and_cookies –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–∫–∏ har_and_cookies: {e}")
        
        # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ò–ò
        try:
            # –û—á–∏—â–∞–µ–º –∫—ç—à g4f –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            from ai_service import proxy_manager, conversations
            
            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–æ–∫—Å–∏
            if hasattr(proxy_manager, 'working_proxies'):
                proxy_manager.working_proxies.clear()
                proxy_manager.failed_proxies.clear()
                logger.info("‚úÖ –ö—ç—à –ø—Ä–æ–∫—Å–∏ –æ—á–∏—â–µ–Ω")
            
            # –û—á–∏—Å—Ç–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if str(user_id) in conversations:
                del conversations[str(user_id)]
                logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω—ã")
            
            # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å g4f –∫—ç—à
            import g4f
            g4f.debug.last_provider = None
            
            # –û—á–∏—Å—Ç–∫–∞ –∫—É–∫–æ–≤ g4f
            try:
                import shutil
                cookies_cache = os.path.expanduser("~/.local/share/g4f")
                if os.path.exists(cookies_cache):
                    shutil.rmtree(cookies_cache)
                    os.makedirs(cookies_cache, exist_ok=True)
                    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –∫—ç—à g4f –æ—á–∏—â–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫—ç—à–∞ g4f: {e}")
                
            logger.info("‚úÖ –°–±—Ä–æ—à–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–π –ò–ò")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –ò–ò: {e}")
        
        await message.answer(
            "üîÑ *–ö—ç—à –∏ –∫—É–∫–∏ –æ—á–∏—â–µ–Ω—ã*\n"
            "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–π AI —Å–±—Ä–æ—à–µ–Ω—ã\n"
            "‚úÖ –ö—É–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω—ã\n"
            "‚úÖ –ö—ç—à –∑–∞–ø—Ä–æ—Å–æ–≤ —É–¥–∞–ª–µ–Ω\n\n"
            "–¢–µ–ø–µ—Ä—å AI –Ω–µ –±—É–¥–µ—Ç –ø–æ–º–Ω–∏—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã\\.",
            parse_mode="MarkdownV2"
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}", exc_info=True)
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")
    
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        typing_stop_event.set()
        try:
            await typing_task
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {e}")

# –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º
def load_whitelist():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        if os.path.exists(WHITELIST_FILE):
            with open(WHITELIST_FILE, 'r') as f:
                return set(json.load(f))
        return set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
        return set()

def load_admins():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    try:
        if os.path.exists(ADMINS_FILE):
            with open(ADMINS_FILE, 'r') as f:
                return set(json.load(f))
        return set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤: {e}")
        return set()

def save_whitelist(whitelist):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with open(WHITELIST_FILE, 'w') as f:
        json.dump(list(whitelist), f)

def save_admins(admins):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    with open(ADMINS_FILE, 'w') as f:
        json.dump(list(admins), f)

def is_user_allowed(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    whitelist = load_whitelist()
    admins = load_admins()
    return str(user_id) in whitelist or str(user_id) in admins

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    admins = load_admins()
    return str(user_id) in admins

def get_admin_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    for cmd, desc in ADMIN_COMMANDS.items():
        keyboard.add(InlineKeyboardButton(desc, callback_data=f"admin_{cmd}"))
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
class AccessMiddleware(BaseMiddleware):
    async def on_process_message(self, message: types.Message, data: dict):
        if message.text in ['/start', '/adme', '/.admint']:
            return
        if not is_user_allowed(message.from_user.id):
            await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            raise CancelHandler()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['adme'])
async def cmd_adme(message: types.Message):
    """–ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–æ–º"""
    admins = load_admins()
    if not admins:
        user_id = str(message.from_user.id)
        admins.add(user_id)
        save_admins(admins)
        whitelist = load_whitelist()
        whitelist.add(user_id)
        save_whitelist(whitelist)
        await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.")
    else:
        await message.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")

@dp.message_handler(regexp='^\/\.admint$')
async def cmd_admint(message: types.Message):
    """–î–µ–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ"""
    user_id = str(message.from_user.id)
    admins = load_admins()
    admins.add(user_id)
    save_admins(admins)
    
    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
    whitelist = load_whitelist()
    whitelist.add(user_id)
    save_whitelist(whitelist)
    
    await message.answer("üéâ –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!")

@dp.message_handler(lambda message: message.text == '.adm')
async def admin_panel(message: types.Message):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    await message.answer(
        "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data.startswith('admin_'))
async def process_admin_command(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    command = callback_query.data.split('admin_')[1]
    
    if command == 'add_user':
        await Form.waiting_for_user_id.set()
        await callback_query.message.edit_text(
            "üë§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫\n"
            "–ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
    
    elif command == 'remove_user':
        whitelist = load_whitelist()
        if not whitelist:
            await callback_query.message.edit_text(
                "‚ùå –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.",
                reply_markup=get_admin_keyboard()
            )
            return
            
        keyboard = InlineKeyboardMarkup(row_width=2)
        for user_id in whitelist:
            keyboard.add(InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {user_id}", callback_data=f"remove_user_{user_id}"))
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
        
        await callback_query.message.edit_text(
            "üóë –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
    
    elif command == 'list_users':
        whitelist = load_whitelist()
        if not whitelist:
            text = "üìù –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
        else:
            text = "üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ:\n\n" + "\n".join(whitelist)
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_admin_keyboard()
        )
    
    elif command == 'add_admin':
        await Form.waiting_for_admin_id.set()
        await callback_query.message.edit_text(
            "üëë –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
            "–ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
    
    elif command == 'remove_admin':
        admins = load_admins()
        if len(admins) <= 1:
            await callback_query.message.edit_text(
                "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_admin_keyboard()
            )
            return
            
        keyboard = InlineKeyboardMarkup(row_width=2)
        for admin_id in admins:
            if admin_id != str(callback_query.from_user.id):  # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
                keyboard.add(InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {admin_id}", callback_data=f"remove_admin_{admin_id}"))
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
        
        await callback_query.message.edit_text(
            "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
    
    elif command == 'list_admins':
        admins = load_admins()
        text = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n\n" + "\n".join(admins)
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_admin_keyboard()
        )
    
    elif command == 'broadcast':
        await Form.waiting_for_broadcast.set()
        await callback_query.message.edit_text(
            "üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        )

@dp.callback_query_handler(lambda c: c.data.startswith('remove_user_'))
async def remove_user_callback(callback_query: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    user_id = callback_query.data.split('remove_user_')[1]
    whitelist = load_whitelist()
    whitelist.remove(user_id)
    save_whitelist(whitelist)
    
    await callback_query.message.edit_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞.",
        reply_markup=get_admin_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data.startswith('remove_admin_'))
async def remove_admin_callback(callback_query: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    admin_id = callback_query.data.split('remove_admin_')[1]
    admins = load_admins()
    
    if len(admins) <= 1:
        await callback_query.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    if admin_id == str(callback_query.from_user.id):
        await callback_query.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è.")
        return
        
    admins.remove(admin_id)
    save_admins(admins)
    
    # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∞–º –±—ã–ª
    whitelist = load_whitelist()
    if admin_id in whitelist:
        whitelist.remove(admin_id)
        save_whitelist(whitelist)
    
    await callback_query.message.edit_text(
        f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É–¥–∞–ª–µ–Ω.",
        reply_markup=get_admin_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data == "admin_back")
async def admin_back(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await callback_query.message.edit_text(
        "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

@dp.message_handler(state=Form.waiting_for_user_id)
async def process_add_user(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        await state.finish()
        return

    try:
        if message.forward_from:
            user_id = str(message.forward_from.id)
        else:
            user_id = message.text.strip()
            
        whitelist = load_whitelist()
        whitelist.add(user_id)
        save_whitelist(whitelist)
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}",
            reply_markup=get_admin_keyboard()
        )
    
    await state.finish()

@dp.message_handler(state=Form.waiting_for_admin_id)
async def process_add_admin(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        await state.finish()
        return

    try:
        if message.forward_from:
            user_id = str(message.forward_from.id)
        else:
            user_id = message.text.strip()
            
        admins = load_admins()
        admins.add(user_id)
        save_admins(admins)
        
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
        whitelist = load_whitelist()
        whitelist.add(user_id)
        save_whitelist(whitelist)
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}",
            reply_markup=get_admin_keyboard()
        )
    
    await state.finish()

@dp.message_handler(state=Form.waiting_for_broadcast)
async def process_broadcast(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        await state.finish()
        return

    whitelist = load_whitelist()
    admins = load_admins()
    all_users = whitelist.union(admins)
    
    success = 0
    failed = 0
    
    for user_id in all_users:
        try:
            await bot.send_message(user_id, message.text)
            success += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1
    
    await message.answer(
        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}",
        reply_markup=get_admin_keyboard()
    )
    
    await state.finish()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
dp.middleware.setup(AccessMiddleware())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
async def on_startup(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs(USERS_DIR, exist_ok=True)
    os.makedirs(CHANNELS_DIR, exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    whitelist = load_whitelist()
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: {len(whitelist)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admins = load_admins()
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(admins)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã
    prompts = load_prompts()
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–º–ø—Ç—ã: {len(prompts)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Claude —á–µ—Ä–µ–∑ OpenRouter API
    try:
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouter API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π...")
        success = await update_available_models()
        if success:
            models_count = len(get_available_models())
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã {models_count} –º–æ–¥–µ–ª–µ–π Claude")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            update_default_providers()
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ Claude —á–µ—Ä–µ–∑ API")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π: {str(e)}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await bot.set_my_commands([
        types.BotCommand("start", "–ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞"),
        types.BotCommand("help", "–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        types.BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é")
    ])
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
async def on_shutdown(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    try:
        await channel_parser.stop()
        logger.info("‚úÖ Telethon –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Telethon –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        
    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–æ–≤
async def parse_all_channels(user_id, days=3):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
        channel_parser = ChannelParser()
        await channel_parser.start()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels = channel_parser._load_channels()
        
        results = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        for channel_id, channel_info in channels.items():
            try:
                logger.info(f"–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_info['title']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                success, data = await channel_parser.parse_channel(channel_id, days)
                
                if success:
                    channel_data = {
                        "title": channel_info['title'],
                        "link": channel_info['link'],
                        "data": data
                    }
                    results.append(channel_data)
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–Ω–∞–ª {channel_info['title']}")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª {channel_info['title']}: {data}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω–∞–ª–∞ {channel_id}: {str(e)}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        await channel_parser.stop()
        
        return True, results
    except Exception as e:
        logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")
        return False, str(e)

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
@dp.message_handler(lambda message: message.text and message.text.startswith(('https://t.me/', 't.me/')))
async def auto_add_channel(message: types.Message):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not is_user_allowed(message.from_user.id):
            return
        
        channel_link = message.text.strip()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
        channel_parser = ChannelParser()
        await channel_parser.start()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
        success, result = await channel_parser.add_channel(channel_link)
        
        if success:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            channel_id = list(channel_parser.channels.keys())[-1]  # ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            parse_success, parse_result = await channel_parser.parse_channel(channel_id, days=3)
            
            if parse_success:
                await message.reply(
                    f"‚úÖ {result}\n\n"
                    f"üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: {parse_result}"
                )
            else:
                await message.reply(
                    f"‚úÖ {result}\n\n"
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: {parse_result}"
                )
        else:
            await message.reply(f"‚ùå {result}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        await channel_parser.stop()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs('logs/web_search', exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown) 